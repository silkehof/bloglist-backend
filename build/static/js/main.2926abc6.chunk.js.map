{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","buttonClass","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontWeight","fontFamily","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"oLAiBeA,EAfF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,YAAc,gBAEdC,EAAcJ,EAAKG,UACnB,mBAAqB,qBAE3B,OACI,qBAAIE,UAAU,OAAd,UACKL,EAAKM,QACN,wBAAQD,UAAWD,EAAaG,QAASN,EAAzC,SAA4DC,QCEzDM,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,K,gBCRPC,EAAU,aAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCVvCK,EAAS,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,UACPC,WAAY,QACZC,WAAY,UACZC,SAAU,IAGV,UACI,uBACA,0GA8FGC,EAzFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAEKxB,MAAK,SAAAyB,GACFT,EAASS,QAElB,IAEH,IAyCMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAAxC,GAAI,OAAuB,IAAnBA,EAAKG,aAEhC,OACI,gCACI,uCACA,cAAC,EAAD,CAAcM,QAASyB,IACvB,8BACI,yBAAQ7B,UAAU,kBAAkBE,QAAS,kBAAM0B,GAAYD,IAA/D,kBACUA,EAAU,YAAc,WAGtC,6BACKO,EAAYE,KAAI,SAACzC,EAAM0C,GAAP,OACb,cAAC,EAAD,CAEI1C,KAAMA,EACNC,iBAAkB,kBA3DX,SAAAiB,GACvB,IAAMlB,EAAO4B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAQ7C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDkC,EACYnB,EAAI2B,GACXhC,MAAK,SAAAiC,GACFjB,EAASD,EAAMa,KAAI,SAAAzC,GAAI,OAAIA,EAAKkB,KAAOA,EAAKlB,EAAO8C,SAEtDC,OAAM,SAAAC,GACHb,EAAgB,SAAD,OACFnC,EAAKM,QADH,sCAGf2C,YAAW,WACPd,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAE1B,KAAOA,SA2CJgC,CAAmBlD,EAAKkB,MAF3CwB,QAMjB,uBAAMS,SA3CE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfhD,QAASwB,EACTyB,MAAM,IAAIC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAG/BtB,EACYiB,GACPzC,MAAK,SAAAiC,GACFjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QA+Bf,UACI,uBACA8B,MAAO/B,EACPgC,SA9Ba,SAACV,GACtBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB9B,EAAWqB,EAAMa,OAAOJ,UA8BhB,wBAAQxD,UAAU,kBAAkB6D,KAAK,SAAzC,qBAEJ,cAAC,EAAD,Q,MCnGZC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2926abc6.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'Important' : 'Not important'\n\n    const buttonClass = note.important\n        ? 'button-important' : 'button-unimportant'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button className={buttonClass} onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n} \n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: '#808080',\n        fontWeight: 'light',\n        fontFamily: 'Verdana',\n        fontSize: 14\n    }\n    return (\n        <div style={footerStyle}>\n            <br />\n            <p>Note app, Department of Computer Science, University of Helsinki 2020</p>\n        </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const toggleImportanceOf = id => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important === true)\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button className='button-standard' onClick={() => setShowAll(!showAll)}>\n                    Show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) =>\n                    <Note \n                        key={i} \n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)} \n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input \n                value={newNote}\n                onChange={handleNoteChange}\n                />\n                <button className='button-standard' type='submit'>Save</button>\n            </form>\n            <Footer  />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}